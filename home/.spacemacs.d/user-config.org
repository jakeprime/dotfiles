* Spacemacs Config

=, b t= to tangle files after editing.

** General
Don't put autosave files in the same folder, it messes with things that detect for file changes in the codebase. And get rid of lockfiles completely.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms `((".*" "~/.emacs.d/autosaves/" t)))
  (setq backup-by-copying t) ; Avoid symlinks getting messed up
  (setq create-lockfiles nil)
#+end_src

** 😎

#+begin_src emacs-lisp :tangle "user-config.el"
  (add-to-list 'custom-theme-load-path "~/.spacemacs.d/")
  (load-file "~/.spacemacs.d/faces-init.el")

  (setq dotspacemacs-startup-banner "~/.spacemacs.d/vaporwave-sun.png")
  (setq lsp-ui-doc-border "#200933")

  ; need proportional width for nerdfonts or they overlap
  (setq nerd-icons-font-family "MonaspiceAr Nerd Font Propo")

#+end_src

** ChatGPT

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq gptel-model 'gpt-4o-mini)
#+end_src

Set up the keybinding.

#+begin_src emacs-lisp :tangle "user-config.el"
  (defun my-open-chat-gpt ()
    (interactive)
    (gptel "*ChatGPT*")
    (let ((buffer (get-buffer "*ChatGPT*")))
      (switch-to-buffer buffer)))

  (spacemacs/set-leader-keys
    "og" 'my-open-chat-gpt)
#+end_src

** Cleo

*** Codeowners

#+begin_src emacs-lisp :tangle "user-config.el"
  (defun jake/github-codeowners-this-file ()
    "Message the result of running github-codeowners on this file"
    (interactive)
    (projectile-with-default-dir (projectile-acquire-root)
      (let* ((this-file (spacemacs/projectile-copy-file-path))
             (codeowner (shell-command-to-string (concat "bin/cleo-codeowners find_owner " this-file))))
        (message codeowner))))

  (spacemacs/set-leader-keys
    "oo" 'jake/github-codeowners-this-file)

#+end_src
** Coding
*** General
By default the =bug-reference= package treats numeric RGB values as links to an issue. Disable it.

#+begin_src emacs-lisp :tangle "user-config.el"
  (with-eval-after-load 'bug-reference
    (remove-hook 'prog-mode-hook #'bug-reference-prog-mode))
#+end_src

**** Code folding

#+begin_src emacs-lisp :tangle "user-config.el"
  (spacemacs/set-leader-keys "off" 'hs-toggle-hiding)
  (spacemacs/set-leader-keys "ofl" 'hs-hide-level)
  (spacemacs/set-leader-keys "ofa" 'hs-show-all)
#+end_src


**** Parentheses
By default all parentheses (or curly braces) that enclose the cursor are coloured in a sequence defined by this variable. But it doesn't override the colour of the glow from rainbow parents and looks terrible. Active parens are bolded though which gives us an indicator, and does play nice with the glow.

#+begin_src emacs-lisp :tangle "user-config.el"
  (with-eval-after-load 'highlight-parentheses
    (setq highlight-parentheses-colors nil))

#+end_src

**** Autocomplete
Autocomplete doesn't work well with the defaults for a couple or reasons:

- It doesn't come up until you start typing, especially useless when adding attributes to a TSX tag
- Following a =:= character in Ruby it wants to suggest every symbol in the whole application, and it can't cope with such a huge list

So we'll turn off the auto tooltip and add a keyboard command for opening at will.

#+begin_src emacs-lisp :tangle "user-config.el"
  (global-set-key (kbd "s-<return>") 'company-complete)

  (defun jake-disable-company-for-symbols (func &rest args)
    "Prevent Company from triggering if the current word starts with `:`"
    (if (and (derived-mode-p 'ruby-mode)
             (looking-back ":[[:alnum:]_]*" (line-beginning-position)))
        nil
      (apply func args)))

  (advice-add 'company--should-complete :around #'jake-disable-company-for-symbols)
#+end_src

**** LSP
All the LSP features are enabled by default and the result is hella noisy.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq lsp-enable-symbol-highlighting nil)
  (setq lsp-ui-doc-show-with-cursor nil)
  (setq lsp-lens-enable nil)
  (setq lsp-ui-sideline-enable nil)
  (setq lsp-eldoc-enable-hover nil)
  (setq lsp-modeline-diagnostics-enable nil)
  (setq lsp-signature-auto-activate nil)
#+end_src

**** Flycheck info
These pos-tips actually use system windows, so not easy to style, and in Hyprland they have rounded corners. Let's see how we go.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq flycheck-pos-tip-max-width 80)
  (setq flycheck-pos-tip-mode t)
  (setq pos-tip-border-width 0)
  (setq pos-tip-internal-border-width 4)
  (setq pos-tip-tab-width 80)
#+end_src

*** Ruby
**** Cleo console
Define the Cleo prompt format, otherwise it's not possible to retrieve previous commands by pressing the up arrow.

#+begin_src emacs-lisp :tangle "user-config.el"
  (add-hook 'inf-ruby-mode-hook
            (lambda()
              (let ((p "\\|\\(^\\[cleo\\]\\[development\\] main:[0-9]+> *\\)"))
                (setq inf-ruby-first-prompt-pattern
                      (concat inf-ruby-first-prompt-pattern p))
                (setq inf-ruby-prompt-pattern
                      (concat inf-ruby-prompt-pattern p)))))
#+end_src

**** Code folding
Hideshow doesn't know what constitutes a block in Ruby.

#+begin_src emacs-lisp :tangle "user-config.el"
  (eval-after-load "hideshow"
    '(add-to-list 'hs-special-modes-alist
       `(ruby-mode
          ,(rx (or "def" "class" "module" "do" "{" "[")) ; Block start
          ,(rx (or "}" "]" "end"))                       ; Block end
          ,(rx (or "#" "=begin"))                        ; Comment start
          ruby-forward-sexp nil)))
#+end_src

**** Flycheck
The lsp flychecker is how we know about Sorbet errors, but we want Rubocop too so we have to chain them.

#+begin_src emacs-lisp :tangle "user-config.el"
  (defun my-add-flycheck-next-checker ()
    (when (and (derived-mode-p 'ruby-mode)
               ;; Ensure LSP checker exists
               (flycheck-registered-checker-p 'lsp))
      (flycheck-add-next-checker 'lsp 'ruby-rubocop)))

  (eval-after-load 'flycheck
    '(add-hook 'flycheck-mode-hook #'my-add-flycheck-next-checker))

  (setq flycheck-disabled-checkers '(ruby-reek))
#+end_src


Make sure we use bundler for flycheck. Otherwise we would have issues when multiple projects use different versions, especially as the work ones are out of my individual control. I'm not sure I'm using the rubocop lsp, in fact fairly sure I'm not, but if I was I'd want to be using bundler, so leave that in.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq lsp-rubocop-use-bundler t)

  (add-hook
   'ruby-mode-hook
   (lambda ()
     (setq-local flycheck-command-wrapper-function
                 (lambda (command)
(append (list (concat (project-root (project-current)) "bin/bundle") "exec") command)))))
#+end_src

**** LSP
I've been round the houses on this one, but currently we are using Shopify's Ruby LSP with Sorbet as an addon.

Both Ruby LSP and Sorbet are default gems installed by asdf with every version of Ruby, but if we want to use the bundled version of sorbet add the following as a dir-local:

 #+begin_src emacs-lisp
  ((ruby-mode . ((lsp-sorbet-use-bundler . t))))
  (setq lsp-sorbet-as-add-on t)
#+end_src

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq lsp-disabled-clients '(rubocop-ls ruby-ls sorbet-ls))
#+end_src

**** Tests
For some reason by default there are a couple of spaces rendered at the beginning of the filename, breaking navigation.

#+begin_src emacs-lisp :tangle "user-config.el"
  (assq-delete-all 'ruby-Test::Unit compilation-error-regexp-alist-alist)
  (add-to-list 'compilation-error-regexp-alist-alist '(ruby-Test::Unit "^ +\\([^ (].*\\):\\([1-9][0-9]*\\):in " 1 2))
  (assoc 'ruby-Test::Unit compilation-error-regexp-alist-alist)
#+end_src

*** Typescript

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq typescript-fmt-on-save t)
  (setq typescript-fmt-tool 'prettier)
  (setq typescript-indent-level 2)
  (setq typescript-linter 'eslint)
#+end_src

*** Typespec
Uses tree-sitter. With the config below it will know where to look to install the grammar with:
=M-x treesit-install-language-grammar=

#+begin_src emacs-lisp :tangle "user-config.el"
  (with-eval-after-load 'treesit
    (add-to-list 'treesit-language-source-alist
                 '(typespec "https://github.com/happenslol/tree-sitter-typespec")))
#+end_src

*** Web
2 space indent, we're not animals.

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
#+end_src

** Dired
Use diredfl. It's very pretty.

#+begin_src emacs-lisp :tangle "user-config.el"
  (add-hook 'dired-mode-hook 'diredfl-mode)
#+end_src

** Email

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq mu4e-installation-path (getenv "MU4E_DIR"))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-update-interval (* 5 60))
  (setq mu4e-change-filenames-when-moving t)
#+end_src

*** SMTP
This is used whenever we want to send emails, whether from mu4e or otherwise.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq message-send-mail-function 'smtpmail-send-it
    smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
    smtpmail-auth-credentials (expand-file-name "~/.authinfo")
    smtpmail-default-smtp-server "smtp.gmail.com"
    smtpmail-smtp-user "jake@meetcleo.com"
    smtpmail-smtp-server "smtp.gmail.com"
    smtpmail-smtp-service 587
    smtpmail-debug-info t)
#+end_src

*** Mail accounts
One for personal, one for Cleo

#+begin_src emacs-lisp :tangle "user-config.el"
  (with-eval-after-load 'mu4e
    (setq mu4e-contexts
          (list
           (make-mu4e-context
            :name "Cleo"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/cleo" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "jake@meetcleo.com")
                    (user-full-name . "Jake Prime")
                    (mu4e-refile-folder . "/cleo/_Archive")
                    (mu4e-sent-folder . "/cleo/[Gmail]/Sent Mail")
                    (mu4e-trash-folder . "/cleo/[Gmail]/Bin")
                    (mu4e-alert-interesting-mail-query . "flag:unread AND maildir:/cleo/Inbox")
                    (smtpmail-smtp-user . "jake@meetcleo.com")))
           (make-mu4e-context
            :name "Personal"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/personal" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "jake@jakeprime.com")
                    (user-full-name . "Jake Prime")
                    (mu4e-refile-folder . "/personal/_Archive")
                    (mu4e-sent-folder . "/personal/[Google Mail]/Sent Mail")
                    (mu4e-trash-folder . "/personal/[Google Mail]/Bin")
                    (mu4e-alert-interesting-mail-query . "flag:unread AND maildir:/personal/Inbox")
                    (smtpmail-smtp-user . "jake.prime@gmail.com")))
           ))

    (setq mu4e-modeline-all-clear '("C:" . "󰄰 "))
    (setq mu4e-modeline-new-items '("N:" . "󰈸 "))
    (setq mu4e-modeline-read-items '("R:" . " "))
    (setq mu4e-modeline-unread-items '("U:" . " "))

    (setq mu4e-maildir-shortcuts
          '((:maildir "/cleo/Inbox" :key ?c :name "Cleo" :hide t)
            (:maildir "/personal/Inbox" :key ?p :name "Personal" :hide t))))
#+end_src

*** Configure actions

Change the icons for refiling, trashing, etc. The default ones don't render at the same size as a standard character, and throw off the alignment in the list.

We don't actually want to delete emails, Gmail takes care of that, we just need to move to the Trash/Bin folder.

For refiling it is important not refile my own sent messages. Gmail is happy to have multiple labels on a message, but mu expects each message to live in a single folder. Refiling a sent mail will remove it from "Sent messages", which we do not want. mu4e will still keep the threads together even if some are archived and some are in "Sent".

#+begin_src emacs-lisp :tangle "user-config.el"
  (with-eval-after-load 'mu4e
    (setf (alist-get 'refile mu4e-marks)
          '(:char ("r" . "▶")
            :prompt "refile"
            :show-target (lambda (target)
                           (if target target "Skip - sent message"))
            :dyn-target (lambda (target msg)
                          (let* ((maildir (mu4e-message-field msg :maildir))
                                 (sent-folder (mu4e-get-sent-folder msg)))
                            (if (string= maildir sent-folder)
                                nil
                              (mu4e-get-refile-folder msg))))
            :action (lambda (docid msg target)
                      (if target
                          (mu4e--server-move docid
                                             (mu4e--mark-check-target target)
                                             "+S-N")
                        nil))))

    (setf (alist-get 'trash mu4e-marks)
          '(:char ("d" . "▼")
            :prompt "dtrash"
            :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
            :action (lambda (docid msg target)
                      (mu4e--server-move docid
                                         (mu4e--mark-check-target target) "+S-N"))))

    (setf (alist-get 'something mu4e-marks)
          '(:char ("*" . "*")
            :prompt "*something"
            :action (mu4e-error "No action for deferred mark")))

    (setq mu4e-headers-attach-mark '("a" . "+"))
    (setq mu4e-headers-list-mark '("l" . "@"))
    (setq mu4e-headers-personal-mark '("p" . "."))
    (setq mu4e-headers-flagged-mark '("f" . "!"))
    (setq mu4e-headers-new-mark '("N" . "*")))
#+end_src

** Flow
=j k= to escape.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq evil-escape-key-sequence [106 107])
#+end_src

Use code syntax to determine a word, e.g =user_profile= should be a word.

#+begin_src emacs-lisp :tangle "user-config.el"
  (defalias 'forward-evil-word 'forward-evil-symbol)
#+end_src

ibuffer

#+begin_src emacs-lisp :tangle "user-config.el"
  (spacemacs/set-leader-keys "oi" 'ibuffer)
#+end_src

** Git

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq git-enable-magit-delta-plugin t)
  (setq git-magit-status-fullscreen t)
  (setq magit-delta-hide-plus-minus-markers nil)
#+end_src

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq vc-follow-symlinks t)
#+end_src

** Layout
*** Modals

#+begin_src emacs-lisp :tangle "user-config.el"
  (use-package transient-posframe
    :ensure t
    :init (transient-posframe-mode))
#+end_src

*** Modeline

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq doom-modeline-buffer-encoding 'nondefault)
  (setq doom-modeline-env-enable-ruby nil)
  (setq doom-modeline-env-version nil)
  (setq doom-modeline-lsp nil)
  (setq doom-modeline-time nil)

  (setq lsp-modeline-code-action-fallback-icon "")
  (setq lsp-progress-prefix " ")
#+end_src

** Org mode

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq org-agenda-files '("~/Org/Tasks.org" "~/Org/Journal/"))
  (setq org-archive-location "~/Org/Archive.org::datetree/")
  (setq org-ellipsis " ▾")
  (setq org-enable-org-journal-support t)
  (setq org-hide-emphasis-markers t)
  (setq org-journal-dir "~/Org/Journal/")
  (setq org-journal-file-format "%Y-%m-%d.org")
  (setq org-journal-time-format "")
  (setq org-journal-time-prefix "** TODO ")
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
  (setq org-superstar-headline-bullets-list '("" "●" "○" "◦" "•" "◦" "•"))
  (setq org-superstar-item-bullet-alist '((?+ . ?•) (?* . ?•) (?- . ?•)))
  (setq org-tags-column 1)
  (setq org-todo-keywords '((sequence "TODO" "|" "DONE" "REJECTED")))
#+end_src

#+begin_src emacs-lisp :tangle "user-config.el"
  (defun my-org-mode-hook ()
    (auto-fill-mode 0)
    (face-remap-add-relative 'hl-line `(:background nil))
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-fill-column-mode 1)
    (visual-line-mode 1)
    (setq evil-auto-indent nil
          visual-fill-column-width 120
          visual-fill-column-center-text t))

  (add-hook 'org-mode-hook 'my-org-mode-hook)
#+end_src

** Terminal

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq shell-default-height 30)
  (setq shell-default-position 'bottom)
#+end_src
