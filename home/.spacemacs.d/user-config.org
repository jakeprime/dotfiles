* Spacemacs Config

=, b t= to tangle files after editing.

** üòé

#+begin_src emacs-lisp :tangle "user-config.el"
  (add-to-list 'custom-theme-load-path "~/.spacemacs.d/")
  (load-file "~/.spacemacs.d/faces-init.el")

  (setq dotspacemacs-startup-banner "~/.spacemacs.d/vaporwave-sun.png")
#+end_src

** ChatGPT

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq gptel-model "gpt-4o-mini")
#+end_src

Set up the keybinding.

#+begin_src emacs-lisp :tangle "user-config.el"
  (defun my-open-chat-gpt ()
    (interactive)
    (gptel "*ChatGPT*")
    (let ((buffer (get-buffer "*ChatGPT*")))
      (switch-to-buffer buffer)))

  (spacemacs/set-leader-keys
    "og" 'my-open-chat-gpt)
#+end_src

** Coding
*** General
By default the =bug-reference= package treats numeric RGB values as links to an issue. Disable it.

#+begin_src emacs-lisp :tangle "user-config.el"
  (with-eval-after-load 'bug-reference
    (remove-hook 'prog-mode-hook #'bug-reference-prog-mode))
#+end_src
*** Ruby
**** Bundler
Make sure we use bundler for flycheck and lsp tools. Otherwise we would have issues when multiple projects use different versions, especially as the work ones are out of my individual control.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq lsp-rubocop-use-bundler t)
  (setq lsp-ruby-lsp-use-bundler t)
  (setq lsp-solargraph-use-bundler t)

  (add-hook 'ruby-mode-hook
            (lambda ()
              (setq-local flycheck-command-wrapper-function
                          (lambda (command) (append '("bundle" "exec") command)))))
#+end_src

**** Cleo console
Define the Cleo prompt format, otherwise it's not possible to retrieve previous commands by pressing the up arrow.

#+begin_src emacs-lisp :tangle "user-config.el"
  (add-hook 'inf-ruby-mode-hook
            (lambda()
              (let ((p "\\|\\(^\\[cleo\\]\\[development\\] main:[0-9]+> *\\)"))
                (setq inf-ruby-first-prompt-pattern
                      (concat inf-ruby-first-prompt-pattern p))
                (setq inf-ruby-prompt-pattern
                      (concat inf-ruby-prompt-pattern p)))))
#+end_src

**** Code folding
Hideshow doesn't know what constitutes a block in Ruby.

#+begin_src emacs-lisp :tangle "user-config.el"
  (eval-after-load "hideshow"
    '(add-to-list 'hs-special-modes-alist
       `(ruby-mode
          ,(rx (or "def" "class" "module" "do" "{" "[")) ; Block start
          ,(rx (or "}" "]" "end"))                       ; Block end
          ,(rx (or "#" "=begin"))                        ; Comment start
          ruby-forward-sexp nil)))

  (spacemacs/set-leader-keys "off" 'hs-toggle-hiding)
  (spacemacs/set-leader-keys "ofl" 'hs-hide-level)
  (spacemacs/set-leader-keys "ofa" 'hs-show-all)
#+end_src

**** Tests
For some reason by default there are a couple of spaces rendered at the beginning of the filename, breaking navigation.

#+begin_src emacs-lisp :tangle "user-config.el"
  (assq-delete-all 'ruby-Test::Unit compilation-error-regexp-alist-alist)
  (add-to-list 'compilation-error-regexp-alist-alist '(ruby-Test::Unit "^ +\\([^ (].*\\):\\([1-9][0-9]*\\):in " 1 2))
  (assoc 'ruby-Test::Unit compilation-error-regexp-alist-alist)
#+end_src

*** Typescript

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq typescript-fmt-on-save t)
  (setq typescript-fmt-tool 'prettier)
  (setq typescript-indent-level 2)
  (setq typescript-linter 'eslint)
#+end_src

** Dired
Use diredfl. It's very pretty.

#+begin_src emacs-lisp :tangle "user-config.el"
  (add-hook 'dired-mode-hook 'diredfl-mode)
#+end_src

** Email

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq mu4e-installation-path (getenv "MU4E_DIR"))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-update-interval (* 5 60))
  (setq mu4e-change-filenames-when-moving t)
#+end_src

*** SMTP
This is used whenever we want to send emails, whether from mu4e or otherwise.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq message-send-mail-function 'smtpmail-send-it
    smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
    smtpmail-auth-credentials (expand-file-name "~/.authinfo")
    smtpmail-default-smtp-server "smtp.gmail.com"
    smtpmail-smtp-user "jake@meetcleo.com"
    smtpmail-smtp-server "smtp.gmail.com"
    smtpmail-smtp-service 587
    smtpmail-debug-info t)
#+end_src

*** Mail accounts
One for personal, one for Cleo

#+begin_src emacs-lisp :tangle "user-config.el"
  (with-eval-after-load 'mu4e
    (setq mu4e-contexts
          (list
           (make-mu4e-context
            :name "Cleo"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/cleo" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "jake@meetcleo.com")
                    (user-full-name . "Jake Prime")
                    (mu4e-refile-folder . "/cleo/[Gmail]/All Mail")
                    (mu4e-sent-folder . "/cleo/[Gmail]/Sent Mail")
                    (mu4e-trash-folder . "/cleo/[Gmail]/Trash")
                    (mu4e-alert-interesting-mail-query . "flag:unread AND maildir:/cleo/Inbox")
                    (smtpmail-smtp-user . "jake@meetcleo.com")))
           (make-mu4e-context
            :name "Personal"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/personal" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "jake@jakeprime.com")
                    (user-full-name . "Jake Prime")
                    (mu4e-refile-folder . "/personal/[Google Mail]/All Mail")
                    (mu4e-sent-folder . "/personal/[Google Mail]/Sent Mail")
                    (mu4e-trash-folder . "/personal/[Google Mail]/Bin")
                    (mu4e-alert-interesting-mail-query . "flag:unread AND maildir:/personal/Inbox")
                    (smtpmail-smtp-user . "jake.prime@gmail.com")))
           ))

    (setq mu4e-modeline-all-clear '("C:" . "Û∞Ñ∞ "))
    (setq mu4e-modeline-new-items '("N:" . "Û∞à∏ "))
    (setq mu4e-modeline-read-items '("R:" . "Ó¨õ "))
    (setq mu4e-modeline-unread-items '("U:" . "ÔêØ "))

    (setq mu4e-maildir-shortcuts
          '((:maildir "/cleo/Inbox" :key ?c :name "Cleo" :hide t)
            (:maildir "/personal/Inbox" :key ?p :name "Personal" :hide t))))
#+end_src

*** Configure actions

Change the icons for refiling, trashing, etc. The default ones don't render at the same size as a standard character, and throw off the alignment in the list.

We don't actually want to delete emails, Gmail takes care of that, we just need to move to the Trash/Bin folder.

#+begin_src emacs-lisp :tangle "user-config.el"
  (with-eval-after-load 'mu4e
    (add-to-list 'mu4e-marks
                 '(trash
                   :char ("d" . "‚ñº")
                   :prompt "dtrash"
                   :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
                   :action (lambda (docid msg target)
                             (mu4e--server-move docid
                                                (mu4e--mark-check-target target) "+S-N"))))
    (add-to-list 'mu4e-marks
                 '(flag
                   :char ("+" . "‚òÖ")
                   :prompt "dflag"
                   :dyn-target (lambda (target msg)
                                 (replace-regexp-in-string "All Mail" "Starred"
                                                           (mu4e-get-refile-folder msg)))
                   :action (lambda (docid msg target)
                             (mu4e--server-move docid
                                                (mu4e--mark-check-target target))))))

  (setq mu4e-headers-attach-mark '("a" . "+"))
  (setq mu4e-headers-list-mark '("l" . "@"))
  (setq mu4e-headers-personal-mark '("p" . "."))
  (setq mu4e-headers-flagged-mark '("f" . "!"))
  (setq mu4e-headers-new-mark '("N" . "*"))
#+end_src

** Flow
=j k= to escape.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq evil-escape-key-sequence [106 107])
#+end_src

Use code syntax to determine a word, e.g =user_profile= should be a word.

#+begin_src emacs-lisp :tangle "user-config.el"
  (defalias 'forward-evil-word 'forward-evil-symbol)
#+end_src

** Git

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq git-enable-magit-delta-plugin t)
  (setq git-magit-status-fullscreen t)
#+end_src

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq vc-follow-symlinks t)
#+end_src

** Layout
*** Modals

#+begin_src emacs-lisp :tangle "user-config.el"
  (use-package transient-posframe
    :ensure t
    :init (transient-posframe-mode))
#+end_src

*** Modeline

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq doom-modeline-buffer-encoding 'nondefault)
  (setq doom-modeline-env-enable-ruby nil)
  (setq doom-modeline-env-version nil)
  (setq doom-modeline-lsp nil)
  (setq doom-modeline-mu4e t)
  (setq doom-modeline-time nil)
#+end_src

** Org mode

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq org-agenda-files '("~/Org/Tasks.org" "~/Org/Journal/"))
  (setq org-archive-location "~/Org/Archive.org::datetree/")
  (setq org-ellipsis " ‚ñæ")
  (setq org-enable-org-journal-support t)
  (setq org-hide-emphasis-markers t)
  (setq org-journal-dir "~/Org/Journal/")
  (setq org-journal-file-format "%Y-%m-%d.org")
  (setq org-journal-time-format "")
  (setq org-journal-time-prefix "** TODO ")
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
  (setq org-superstar-headline-bullets-list '("" "‚óè" "‚óã" "‚ó¶" "‚Ä¢" "‚ó¶" "‚Ä¢"))
  (setq org-superstar-item-bullet-alist '((?+ . ?‚Ä¢) (?* . ?‚Ä¢) (?- . ?‚Ä¢)))
  (setq org-tags-column 1)
  (setq org-todo-keywords '((sequence "TODO" "|" "DONE" "REJECTED")))
#+end_src

#+begin_src emacs-lisp :tangle "user-config.el"
  (defun my-org-mode-hook ()
    (auto-fill-mode 0)
    (face-remap-add-relative 'hl-line `(:background nil))
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-fill-column-mode 1)
    (visual-line-mode 1)
    (setq evil-auto-indent nil
          visual-fill-column-width 120
          visual-fill-column-center-text t))

  (add-hook 'org-mode-hook 'my-org-mode-hook)
#+end_src

** Terminal

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq shell-default-height 30)
  (setq shell-default-position 'bottom)
#+end_src
