* Spacemacs Config

=, b t= to tangle files after editing.

** üòé

#+begin_src emacs-lisp :tangle "user-config.el"
  (add-to-list 'custom-theme-load-path "~/.spacemacs.d/")
  (load-file "~/.spacemacs.d/faces-init.el")

  (setq dotspacemacs-startup-banner "~/.spacemacs.d/vaporwave-sun.png")
#+end_src

** Coding
*** Ruby
**** Bundler
Make sure we use bundler for flycheck and lsp tools. Otherwise we would have issues when multiple projects use different versions, especially as the work ones are out of my individual control.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq lsp-rubocop-use-bundler t)
  (setq lsp-ruby-lsp-use-bundler t)
  (setq lsp-solargraph-use-bundler t)

  (add-hook 'ruby-mode-hook
            (lambda ()
              (setq-local flycheck-command-wrapper-function
                          (lambda (command) (append '("bundle" "exec") command)))))
#+end_src

**** Cleo console
Define the Cleo prompt format, otherwise it's not possible to retrieve previous commands by pressing the up arrow.

#+begin_src emacs-lisp :tangle "user-config.el"
  (add-hook 'inf-ruby-mode-hook
            (lambda()
              (let ((p "\\|\\(^\\[cleo\\]\\[development\\] main:[0-9]+> *\\)"))
                (setq inf-ruby-first-prompt-pattern
                      (concat inf-ruby-first-prompt-pattern p))
                (setq inf-ruby-prompt-pattern
                      (concat inf-ruby-prompt-pattern p)))))
#+end_src

**** Tests
For some reason by default there are a couple of spaces rendered at the beginning of the filename, breaking navigation.

#+begin_src emacs-lisp :tangle "user-config.el"
  (assq-delete-all 'ruby-Test::Unit compilation-error-regexp-alist-alist)
  (add-to-list 'compilation-error-regexp-alist-alist '(ruby-Test::Unit "^ +\\([^ (].*\\):\\([1-9][0-9]*\\):in " 1 2))
  (assoc 'ruby-Test::Unit compilation-error-regexp-alist-alist)
#+end_src

*** Typescript

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq typescript-fmt-on-save t)
  (setq typescript-fmt-tool 'prettier)
  (setq typescript-indent-level 2)
  (setq typescript-linter 'eslint)
#+end_src

** Dired
Use diredfl. It's very pretty.

#+begin_src emacs-lisp :tangle "user-config.el"
  (add-hook 'dired-mode-hook 'diredfl-mode)
#+end_src

Use the existing buffer when navigating around dired.

#+begin_src emacs-lisp :tangle "user-config.el"
  (require 'dired-single)
  (defun my-dired-single ()
    "Bunch of stuff to run for dired, either immediately or when it's
   loaded."
    (define-key dired-mode-map [return] 'dired-single-buffer)
    (define-key dired-mode-map "^"
                (function
                 (lambda nil (interactive) (dired-single-buffer "..")))))

  ;; if dired's already loaded, then the keymap will be bound
  (if (boundp 'dired-mode-map)
      ;; we're good to go; just add our bindings
      (my-dired-single)
    ;; it's not loaded yet, so add our bindings to the load-hook
    (add-hook 'dired-load-hook 'my-dired-single))
#+end_src

** Flow
=j k= to escape.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq evil-escape-key-sequence [106 107])
#+end_src

Use code syntax to determine a word, e.g =user_profile= should be a word.

#+begin_src emacs-lisp :tangle "user-config.el"
  (defalias 'forward-evil-word 'forward-evil-symbol)
#+end_src

Don't treat the right Alt as Alt, otherwise there is no way to write a =#= character on a Mac.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq mac-right-option-modifier 'none)
#+end_src

** Git

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq git-enable-magit-delta-plugin t)
  (setq git-magit-status-fullscreen t)
#+end_src

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq vc-follow-symlinks t)
#+end_src

** Layout
*** Modals

#+begin_src emacs-lisp :tangle "user-config.el"
  (use-package transient-posframe
    :ensure t
    :init (transient-posframe-mode))
#+end_src

*** Modeline

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq doom-modeline-buffer-encoding 'nondefault)
  (setq doom-modeline-env-enable-ruby nil)
  (setq doom-modeline-env-version nil)
  (setq doom-modeline-lsp nil)
  (setq doom-modeline-time nil)
#+end_src

** Org mode

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq org-agenda-files '("~/Org/Tasks.org" "~/Org/Journal/"))
  (setq org-archive-location "~/Org/Archive.org::datetree/")
  (setq org-ellipsis " ‚ñæ")
  (setq org-enable-org-journal-support t)
  (setq org-hide-emphasis-markers t)
  (setq org-journal-dir "~/Org/Journal/")
  (setq org-journal-file-format "%Y-%m-%d.org")
  (setq org-journal-time-format "")
  (setq org-journal-time-prefix "** TODO ")
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
  (setq org-superstar-headline-bullets-list '("" "‚óè" "‚óã" "‚ó¶" "‚Ä¢" "‚ó¶" "‚Ä¢"))
  (setq org-superstar-item-bullet-alist '((?+ . ?‚Ä¢) (?* . ?‚Ä¢) (?- . ?‚Ä¢)))
  (setq org-tags-column 1)
  (setq org-todo-keywords '((sequence "TODO" "|" "DONE" "REJECTED")))
#+end_src

#+begin_src emacs-lisp :tangle "user-config.el"
  (defun my-org-mode-hook ()
    (auto-fill-mode 0)
    (face-remap-add-relative 'hl-line `(:background nil))
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-fill-column-mode 1)
    (visual-line-mode 1)
    (setq evil-auto-indent nil
          visual-fill-column-width 120
          visual-fill-column-center-text t))

  (add-hook 'org-mode-hook 'my-org-mode-hook)
#+end_src

** Terminal

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq shell-default-height 30)
  (setq shell-default-position 'bottom)
#+end_src
