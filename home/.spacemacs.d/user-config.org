* Spacemacs Config

=, b t= to tangle files after editing.

** üòé

#+begin_src emacs-lisp :tangle "user-config.el"
  (add-to-list 'custom-theme-load-path "~/.spacemacs.d/")
  (load-file "~/.spacemacs.d/faces-init.el")

  (setq dotspacemacs-startup-banner "~/.spacemacs.d/vaporwave-sun.png")
  (setq lsp-ui-doc-border "#200933")

  ; need proportional width for nerdfonts or they overlap
  (setq nerd-icons-font-family "MonaspiceAr Nerd Font Propo")

#+end_src

** ChatGPT

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq gptel-model 'gpt-4o-mini)
#+end_src

Set up the keybinding.

#+begin_src emacs-lisp :tangle "user-config.el"
  (defun my-open-chat-gpt ()
    (interactive)
    (gptel "*ChatGPT*")
    (let ((buffer (get-buffer "*ChatGPT*")))
      (switch-to-buffer buffer)))

  (spacemacs/set-leader-keys
    "og" 'my-open-chat-gpt)
#+end_src

** Coding
*** General
By default the =bug-reference= package treats numeric RGB values as links to an issue. Disable it.

#+begin_src emacs-lisp :tangle "user-config.el"
  (with-eval-after-load 'bug-reference
    (remove-hook 'prog-mode-hook #'bug-reference-prog-mode))
#+end_src

**** Code folding

#+begin_src emacs-lisp :tangle "user-config.el"
  (spacemacs/set-leader-keys "off" 'hs-toggle-hiding)
  (spacemacs/set-leader-keys "ofl" 'hs-hide-level)
  (spacemacs/set-leader-keys "ofa" 'hs-show-all)
#+end_src


**** Parentheses
By default all parentheses (or curly braces) that enclose the cursor are coloured in a sequence defined by this variable. But it doesn't override the colour of the glow from rainbow parents and looks terrible. Active parens are bolded though which gives us an indicator, and does play nice with the glow.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq highlight-parentheses-colors nil)
#+end_src
*** Ruby
**** Cleo console
Define the Cleo prompt format, otherwise it's not possible to retrieve previous commands by pressing the up arrow.

#+begin_src emacs-lisp :tangle "user-config.el"
  (add-hook 'inf-ruby-mode-hook
            (lambda()
              (let ((p "\\|\\(^\\[cleo\\]\\[development\\] main:[0-9]+> *\\)"))
                (setq inf-ruby-first-prompt-pattern
                      (concat inf-ruby-first-prompt-pattern p))
                (setq inf-ruby-prompt-pattern
                      (concat inf-ruby-prompt-pattern p)))))
#+end_src

**** Code folding
Hideshow doesn't know what constitutes a block in Ruby.

#+begin_src emacs-lisp :tangle "user-config.el"
  (eval-after-load "hideshow"
    '(add-to-list 'hs-special-modes-alist
       `(ruby-mode
          ,(rx (or "def" "class" "module" "do" "{" "[")) ; Block start
          ,(rx (or "}" "]" "end"))                       ; Block end
          ,(rx (or "#" "=begin"))                        ; Comment start
          ruby-forward-sexp nil)))
#+end_src

**** Flycheck
The lsp flychecker is how we know about Sorbet errors, but we want Rubocop too so we have to chain them.

#+begin_src emacs-lisp :tangle "user-config.el"
  (defun my-add-flycheck-next-checker ()
    (when (and (derived-mode-p 'ruby-mode)
               ;; Ensure LSP checker exists
               (flycheck-registered-checker-p 'lsp))
      (flycheck-add-next-checker 'lsp 'ruby-rubocop)))

  (eval-after-load 'flycheck
    '(add-hook 'flycheck-mode-hook #'my-add-flycheck-next-checker))

  (setq flycheck-disabled-checkers '(ruby-reek))
#+end_src


Make sure we use bundler for flycheck. Otherwise we would have issues when multiple projects use different versions, especially as the work ones are out of my individual control. I'm not sure I'm using the rubocop lsp, in fact fairly sure I'm not, but if I was I'd want to be using bundler, so leave that in.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq lsp-rubocop-use-bundler t)

  (add-hook
   'ruby-mode-hook
   (lambda ()
     (setq-local flycheck-command-wrapper-function
                 (lambda (command)
(append (list (concat (project-root (project-current)) "bin/bundle") "exec") command)))))
#+end_src

**** Sorbet

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq lsp-sorbet-as-add-on t)
  (setq lsp-sorbet-use-bundler t)
#+end_src

üö® Nasty monkey patch alert üö®

Sorbet's LSP appears to return symbol information in a different format to ruby-ls. Locations are nested and they don't have a =location= key. Because we are running both LSPs at once all refs are processed in one list and the Sorbet ones throw an error. This adds a check that the =location= key exists.

#+begin_src emacs-lisp :tangle "user-config.el"
  (defun jake/redefined-lsp-func (symbols-informations current-position)
    "[Redefined] Convert SYMBOLS-INFORMATIONS to symbols hierarchy on CURRENT-POSITION."
    (--> symbols-informations
         (-keep (-lambda (symbol)
                  (when (and (gethash "location" symbol)
                             (lsp-point-in-range? current-position (gethash "range" (gethash "location" symbol))))
                    (lsp--symbol-information->document-symbol symbol)))
                it)
         (sort it (-lambda ((&DocumentSymbol :range (&Range :start a-start-position :end a-end-position))
                            (&DocumentSymbol :range (&Range :start b-start-position :end b-end-position)))
                    (and (lsp--position-compare b-start-position a-start-position)
                         (lsp--position-compare a-end-position b-end-position))))))


  (defun jake/redefine-lsp ()
    (defun lsp--symbols->document-symbols-hierarchy (symbols)
      "Convert SYMBOLS to symbols-hierarchy."
      (when-let* ((first-symbol (lsp-seq-first symbols)))
        (let ((cur-position (lsp-make-position :line (plist-get (lsp--cur-position) :line)
                                               :character (plist-get (lsp--cur-position) :character))))
          (if (lsp-symbol-information? first-symbol)
              (jake/redefined-lsp-func symbols cur-position)
            (lsp--document-symbols->document-symbols-hierarchy symbols cur-position))))))

  ; even with all these hooks it still needs a reload of the init.el file ü§∑‚Äç‚ôÇÔ∏è
  (with-eval-after-load 'lsp-headerline #'jake/redefine-lsp)
  (with-eval-after-load 'lsp-mode #'jake/redefine-lsp)
  (add-hook 'ruby-mode-hook #'jake/redefine-lsp)
  (add-hook 'lsp-mode-hook #'jake/redefine-lsp)
  (add-hook 'lsp-on-idle-hook #'jake/redefine-lsp)
#+end_src

**** Tests
For some reason by default there are a couple of spaces rendered at the beginning of the filename, breaking navigation.

#+begin_src emacs-lisp :tangle "user-config.el"
  (assq-delete-all 'ruby-Test::Unit compilation-error-regexp-alist-alist)
  (add-to-list 'compilation-error-regexp-alist-alist '(ruby-Test::Unit "^ +\\([^ (].*\\):\\([1-9][0-9]*\\):in " 1 2))
  (assoc 'ruby-Test::Unit compilation-error-regexp-alist-alist)
#+end_src

*** Typescript

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq typescript-fmt-on-save t)
  (setq typescript-fmt-tool 'prettier)
  (setq typescript-indent-level 2)
  (setq typescript-linter 'eslint)
#+end_src

*** Web
2 space indent, we're not animals.

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
#+end_src

** Dired
Use diredfl. It's very pretty.

#+begin_src emacs-lisp :tangle "user-config.el"
  (add-hook 'dired-mode-hook 'diredfl-mode)
#+end_src

** Flow
=j k= to escape.

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq evil-escape-key-sequence [106 107])
#+end_src

Use code syntax to determine a word, e.g =user_profile= should be a word.

#+begin_src emacs-lisp :tangle "user-config.el"
  (defalias 'forward-evil-word 'forward-evil-symbol)
#+end_src

ibuffer

#+begin_src emacs-lisp :tangle "user-config.el"
  (spacemacs/set-leader-keys "oi" 'ibuffer)
#+end_src

** Git

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq git-enable-magit-delta-plugin t)
  (setq git-magit-status-fullscreen t)
  (setq magit-delta-hide-plus-minus-markers nil)
#+end_src

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq vc-follow-symlinks t)
#+end_src

** Layout
*** Modals

#+begin_src emacs-lisp :tangle "user-config.el"
  (use-package transient-posframe
    :ensure t
    :init (transient-posframe-mode))
#+end_src

*** Modeline

#+begin_src emacs-lisp :tangle "user-config.el"
  (setq doom-modeline-buffer-encoding 'nondefault)
  (setq doom-modeline-env-enable-ruby nil)
  (setq doom-modeline-env-version nil)
  (setq doom-modeline-lsp nil)
  (setq doom-modeline-mu4e t)
  (setq doom-modeline-time nil)

  (setq lsp-modeline-code-action-fallback-icon "ÔêÄ")
  (setq lsp-progress-prefix "Ôâí ")
#+end_src

** Org mode

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq org-agenda-files '("~/Org/Tasks.org" "~/Org/Journal/"))
  (setq org-archive-location "~/Org/Archive.org::datetree/")
  (setq org-ellipsis " ‚ñæ")
  (setq org-enable-org-journal-support t)
  (setq org-hide-emphasis-markers t)
  (setq org-journal-dir "~/Org/Journal/")
  (setq org-journal-file-format "%Y-%m-%d.org")
  (setq org-journal-time-format "")
  (setq org-journal-time-prefix "** TODO ")
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
  (setq org-superstar-headline-bullets-list '("" "‚óè" "‚óã" "‚ó¶" "‚Ä¢" "‚ó¶" "‚Ä¢"))
  (setq org-superstar-item-bullet-alist '((?+ . ?‚Ä¢) (?* . ?‚Ä¢) (?- . ?‚Ä¢)))
  (setq org-tags-column 1)
  (setq org-todo-keywords '((sequence "TODO" "|" "DONE" "REJECTED")))
#+end_src

#+begin_src emacs-lisp :tangle "user-config.el"
  (defun my-org-mode-hook ()
    (auto-fill-mode 0)
    (face-remap-add-relative 'hl-line `(:background nil))
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-fill-column-mode 1)
    (visual-line-mode 1)
    (setq evil-auto-indent nil
          visual-fill-column-width 120
          visual-fill-column-center-text t))

  (add-hook 'org-mode-hook 'my-org-mode-hook)
#+end_src

** Terminal

#+begin_src emacs-lisp :tangle "layer-config.el"
  (setq shell-default-height 30)
  (setq shell-default-position 'bottom)
#+end_src
