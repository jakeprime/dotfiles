# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
() {
    # flame
    # LEFT_EDGE=$'\ue0c2 '
    # RIGHT_EDGE=$'\ue0c0 '

    # scrape
    LEFT_EDGE=$'\ue0ca  '
    RIGHT_EDGE=$'\ue0c8  '

    # hex
    # RIGHT_EDGE=$'\ue0cc  '

    # round
    LEFT_EDGE=$'\ue0b6'
    RIGHT_EDGE=$'\ue0b4'
}

prompt_segment() {
    local color
    [[ -n $1 ]] && color="$1" || color="%k"

    # [[ -n $3 ]] || echo -n "%F{red}•%f "

    # When left and right edge
    echo -n "%F{$color}%k$LEFT_EDGE%F{black}%K{$color}"
    [[ -n $2 ]] && echo -n $2
    echo -n "%F{$color}%k$RIGHT_EDGE%f%k%b "

    # when left and right are same orientation, e.g. scrape
    # echo -n "%K{$color}%F{black}$RIGHT_EDGE%F{black}%K{$color}"
    # [[ -n $2 ]] && echo -n $2
    # echo -n " %F{$color}%k$RIGHT_EDGE%f%k%b "
}

# Git: branch/detached head, dirty status
prompt_git() {
  local ref dirty mode repo_path

   if [[ "$(command git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]]; then
    repo_path=$(command git rev-parse --git-dir 2>/dev/null)
    dirty=$(parse_git_dirty)
    ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
    ref="◈ $(command git describe --exact-match --tags HEAD 2> /dev/null)" || \
    ref="➦ $(command git rev-parse --short HEAD 2> /dev/null)"


    if [[ -n ${dirty} ]]; then
        color=yellow
    else
        color=green
    fi
    prompt_segment ${color} "${${ref:gs/%/%%}/refs\/heads\//}"


    local ahead behind
    ahead=$(command git log --oneline @{upstream}.. 2>/dev/null)
    behind=$(command git log --oneline ..@{upstream} 2>/dev/null)

    if [[ -n ${ahead} ]]; then
        echo -n "%F{yellow}󰬭 "
    fi
    if [[ -n ${behind} ]]; then
        echo -n "%F{yellow}󰬧 "
    fi



    setopt promptsubst
    autoload -Uz vcs_info

    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' get-revision true
    zstyle ':vcs_info:*' check-for-changes true
    zstyle ':vcs_info:*' stagedstr ''
    zstyle ':vcs_info:*' unstagedstr ''

    zstyle ':vcs_info:*' formats '%u'
    zstyle ':vcs_info:*' actionformats '%u'
    vcs_info
    unstaged=${vcs_info_msg_0_%%}

    zstyle ':vcs_info:*' formats '%c'
    zstyle ':vcs_info:*' actionformats '%c'
    vcs_info
    staged=${vcs_info_msg_0_%%}

    if [[ -n ${unstaged} ]]; then
        vcs_message=${unstaged}
    elif [[ -n ${staged} ]]; then
        vcs_message=${staged}
    fi

    if [[ -n ${vcs_message} ]]; then
        echo -n "%F{yellow}${vcs_message}%f "
    fi


    if [[ -e "${repo_path}/BISECT_LOG" ]]; then
        echo -n "%F{green}󰯰%f "
    elif [[ -e "${repo_path}/MERGE_HEAD" ]]; then
        echo -n "%F{red}󰰑%f "
    elif [[ -e "${repo_path}/rebase" || -e "${repo_path}/rebase-apply" || -e "${repo_path}/rebase-merge" || -e "${repo_path}/../.dotest" ]]; then
        echo -n "%F{yellow}󰰠%f "
    fi
  fi
}

prompt_dir() {
    local path="${PWD/#$HOME/~}"  # Replace $HOME with ~
    local result=""
    local parts=("${(@s:/:)path}") # Properly split path into array in Zsh

    for ((i=1; i<${#parts[@]}; i++)); do
        local part=${parts[i]:0:1}
        # just add the first character of parent folders, unless it starts with a `.`
        if [[ ${part} == "." ]]; then
            result+="${parts[i]:0:2}/"
        else
            result+="${parts[i]:0:1}/"
        fi
    done

    result+="${parts[-1]}"       # Add the full name of the current directory
    prompt_segment blue ${result} true
}

prompt_end() {
    #   󰋇    
    echo -n "\n%F{red} 󰋇%f"
}


build_prompt() {
    RETVAL=$?
    echo ""
    prompt_dir
    prompt_git
    prompt_end
}

PROMPT='%{%f%b%k%}$(build_prompt) '
